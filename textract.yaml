AWSTemplateFormatVersion: '2010-09-09'
Description: Asynchronous Text detection from multi-page pdf via Textract by Bhishman Desai


Parameters:
    RoleArn:
        Description: Existing IAM role ARN
        Type: String
        Default: arn:aws:iam::712922208151:role/LabRole


Resources:
# Compute
    TextDetectionLambda:
        Type: AWS::Lambda::Function
        Properties:
            Handler: lambda_function.lambda_handler
            Runtime: python3.9
            Role: !Ref RoleArn
            Environment:
                Variables:
                    OUTPUT_BUCKET_NAME: !Sub '${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
                    OUTPUT_S3_PREFIX: 'output'
                    SNS_TOPIC_ARN: !Ref TextExtractSNSTopic
                    SNS_ROLE_ARN: !Ref RoleArn
            Code:
                S3Bucket: term-end-code
                S3Key: response_generator.zip

    CSVGeneratorLambda:
        Type: AWS::Lambda::Function
        Properties:
            Handler: lambda_function.lambda_handler
            Runtime: python3.9
            Timeout: 900
            Role: !Ref RoleArn
            Layers:
                - !Ref PandasLayer
            Environment:
                Variables:
                    BUCKET_NAME: !Sub '${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
                    PREFIX: 'csv'
            Code:
                S3Bucket: term-end-code
                S3Key: csv_generator.zip

    CsvDownloadLambda:
        Type: AWS::Lambda::Function
        Properties:
            Handler: lambda_function.lambda_handler
            Runtime: python3.9
            Role: !Ref RoleArn
            Environment:
                Variables:
                    OUTPUT_BUCKET_NAME: !Sub '${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
            Code:
                S3Bucket: term-end-code
                S3Key: download_csv.zip

    # Permissions
    S3InvokeTextDetectionLambdaPermission:
        Type: AWS::Lambda::Permission
        DependsOn: TextDetectionLambda
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !Ref TextDetectionLambda
            Principal: s3.amazonaws.com
            SourceArn: !Sub
                - arn:aws:s3:::${TextExtractBucket}
                - { TextExtractBucket: !Join [ '-', [ !Ref AWS::StackName, !Ref AWS::Region, !Ref AWS::AccountId ] ] }

    SNSInvokeCSVGeneratorLambdaPermission:
        Type: AWS::Lambda::Permission
        DependsOn: CSVGeneratorLambda
        Properties:
            Action: lambda:InvokeFunction
            FunctionName: !GetAtt CSVGeneratorLambda.Arn
            Principal: sns.amazonaws.com

    LambdaInvokePermission:
        Type: AWS::Lambda::Permission
        Properties:
            FunctionName: !Ref CsvDownloadLambda
            Action: lambda:InvokeFunction
            Principal: apigateway.amazonaws.com
            SourceArn:
                Fn::Sub:
                    - arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiId}/*
                    - apiId: !Ref CsvApiGateway

    # Layers
    PandasLayer:
        Type: AWS::Lambda::LayerVersion
        Properties:
            CompatibleRuntimes:
                - python3.9
            Content:
                S3Bucket: term-end-code
                S3Key: pandas.zip
            Description: Pandas layer

    Frontend:
        Type: AWS::EC2::Instance
        DependsOn:
            - UploadUrlParameter
            - EC2SecurityGroup
        Properties:
            ImageId: ami-0c101f26f147fa7fd
            InstanceType: t2.micro
            KeyName: term-end-ass
            IamInstanceProfile: !Ref FrontendProfile
            SecurityGroupIds:
                - !Ref EC2SecurityGroup
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash -xe
                    exec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1
                    yum update -y
                    yum install -y aws-cli
                    NEXT_PUBLIC_UPLOAD_URL=$(aws ssm get-parameter --name UploadUrl --query 'Parameter.Value' --output text)
                    echo "export NEXT_PUBLIC_UPLOAD_URL=$NEXT_PUBLIC_UPLOAD_URL" >> /etc/environment
                    source /etc/environment
                    NEXT_PUBLIC_DOWNLOAD_URL=$(aws ssm get-parameter --name DownloadUrl --query 'Parameter.Value' --output text)
                    echo "export NEXT_PUBLIC_DOWNLOAD_URL=$NEXT_PUBLIC_DOWNLOAD_URL" >> /etc/environment
                    source /etc/environment
                    aws s3 cp s3://term-end-code/frontend.zip /home/ec2-user/
                    yum install -y unzip
                    unzip /home/ec2-user/frontend.zip -d /home/ec2-user/
                    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
                    export NVM_DIR="$HOME/.nvm"
                    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" 
                    nvm install node
                    npm install -g pm2
                    cd /home/ec2-user/frontend
                    npm install
                    npm run build
                    pm2 start npm --name "next-app" -- start

    # Security Group
    EC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupDescription: 'My security group for EC2 frontend'
            SecurityGroupIngress:
                - IpProtocol: '-1'
                  CidrIp: '0.0.0.0/0'

    # Profile
    FrontendProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Roles:
                - "LabRole"

# Storage
    TextExtractBucket:
        Type: AWS::S3::Bucket
        DependsOn: TextDetectionLambda
        Properties:
            BucketName: !Sub '${AWS::StackName}-${AWS::Region}-${AWS::AccountId}'
            NotificationConfiguration:
                LambdaConfigurations:
                    - Event: s3:ObjectCreated:*
                      Function: !GetAtt TextDetectionLambda.Arn
                      Filter:
                          S3Key:
                              Rules:
                                  - Name: prefix
                                    Value: input/
                                  - Name: suffix
                                    Value: .pdf

# Network
    TextExtractApiGateway:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: TextExtractApiGateway
            Description: API Gateway with binary support for Text Extract
            BinaryMediaTypes:
                - '*/*'

    CsvApiGateway:
        Type: AWS::ApiGateway::RestApi
        Properties:
            Name: CsvApiGateway
            Description: API Gateway for triggering the CsvDownloadLambda function

    # Resource
    UploadResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref TextExtractApiGateway
            ParentId: !GetAtt
                - TextExtractApiGateway
                - RootResourceId
            PathPart: upload

    FilenameResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref TextExtractApiGateway
            ParentId: !Ref UploadResource
            PathPart: '{filename}'

    CsvResource:
        Type: AWS::ApiGateway::Resource
        Properties:
            RestApiId: !Ref CsvApiGateway
            ParentId: !GetAtt
                - CsvApiGateway
                - RootResourceId
            PathPart: download

    # Method
    UploadMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref TextExtractApiGateway
            ResourceId: !Ref FilenameResource
            HttpMethod: PUT
            AuthorizationType: NONE
            ApiKeyRequired: false
            RequestParameters:
                method.request.header.Content-Type: false
                method.request.path.filename: true
            Integration:
                Type: AWS
                IntegrationHttpMethod: PUT
                Uri:
                    Fn::Sub:
                        - arn:aws:apigateway:${AWS::Region}:s3:path/${BucketName}/input/{filename}
                        - BucketName: !Ref TextExtractBucket
                PassthroughBehavior: WHEN_NO_TEMPLATES
                Credentials: !Ref RoleArn
                RequestParameters:
                    integration.request.path.filename: 'method.request.path.filename'
                IntegrationResponses:
                    - StatusCode: 200
                      ResponseParameters:
                          method.response.header.Access-Control-Allow-Origin: "'*'"
            MethodResponses:
                - StatusCode: 200
                  ResponseParameters:
                      method.response.header.Access-Control-Allow-Origin: true

    CsvGetMethod:
        Type: AWS::ApiGateway::Method
        Properties:
            RestApiId: !Ref CsvApiGateway
            ResourceId: !Ref CsvResource
            HttpMethod: 'GET'
            AuthorizationType: 'NONE'
            Integration:
                Type: 'AWS_PROXY'
                IntegrationHttpMethod: 'POST'
                Uri:
                    Fn::Sub:
                        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
                        - lambdaArn: !GetAtt CsvDownloadLambda.Arn

    # Deployment
    TextExtractApiDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn: UploadMethod
        Properties:
            RestApiId: !Ref TextExtractApiGateway
            Description: Deployment for the PDF Upload API
            StageName: prod

    CsvApiDeployment:
        Type: AWS::ApiGateway::Deployment
        DependsOn: CsvGetMethod
        Properties:
            RestApiId: !Ref CsvApiGateway
            Description: Deployment for the CSV Download API
            StageName: prod

# General
    TextExtractSNSTopic:
        Type: AWS::SNS::Topic
        Properties:
            TopicName: AmazonTextractTopic
            Subscription:
                - Protocol: lambda
                  Endpoint: !GetAtt CSVGeneratorLambda.Arn

# SSM Parameter
    UploadUrlParameter:
        Type: AWS::SSM::Parameter
        DependsOn: TextExtractApiDeployment
        Properties:
            Name: UploadUrl
            Type: String
            Value: !Sub "https://${TextExtractApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"

    DownloadUrlParameter:
        Type: AWS::SSM::Parameter
        DependsOn: CsvApiDeployment
        Properties:
            Name: DownloadUrl
            Type: String
            Value: !Sub "https://${CsvApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/download"

# Output
Outputs:
    TextExtractBucketName:
        Description: The name of the S3 bucket
        Value: !Ref TextExtractBucket
    TextDetectionLambdaFunctionArn:
        Description: The ARN of the TextDetectionLambda function
        Value: !GetAtt TextDetectionLambda.Arn
    CSVGeneratorLambdaFunctionArn:
        Description: The ARN of the CSVGeneratorLambda function
        Value: !GetAtt CSVGeneratorLambda.Arn
    TextExtractApiUrl:
        Description: The URL of the TextExtract API
        Value: !Sub "https://${TextExtractApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/upload/{filename}"
        Export:
            Name: TextExtractApiUrl
    InstanceId:
        Description: The Instance ID
        Value: !Ref Frontend
    CsvApiUrl:
        Description: URL for the CSV Download API
        Value: !Sub "https://${CsvApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/download"
